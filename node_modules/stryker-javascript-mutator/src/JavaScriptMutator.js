"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js_1 = require("log4js");
var core_1 = require("stryker-api/core");
var BabelParser_1 = require("./helpers/BabelParser");
var copy_1 = require("./helpers/copy");
var NodeMutatorFactory_1 = require("./NodeMutatorFactory");
var path = require("path");
function defaultMutators() {
    return NodeMutatorFactory_1.default.instance().knownNames().map(function (name) { return NodeMutatorFactory_1.default.instance().create(name, undefined); });
}
var JavaScriptMutator = /** @class */ (function () {
    function JavaScriptMutator(config, mutators) {
        if (mutators === void 0) { mutators = defaultMutators(); }
        this.mutators = mutators;
        this.log = log4js_1.getLogger(JavaScriptMutator.name);
        log4js_1.setGlobalLogLevel(config.logLevel);
    }
    JavaScriptMutator.prototype.mutate = function (inputFiles) {
        var _this = this;
        var mutants = [];
        inputFiles.filter(function (i) { return i.kind === core_1.FileKind.Text && i.mutated && _this.hasValidExtension(i); }).forEach(function (file) {
            var ast = BabelParser_1.default.getAst(file.content);
            var baseAst = copy_1.default(ast, true);
            BabelParser_1.default.removeUseStrict(baseAst);
            BabelParser_1.default.getNodes(ast).forEach(function (node) {
                _this.mutators.forEach(function (mutator) {
                    var mutatedNodes = mutator.mutate(node, copy_1.default);
                    if (mutatedNodes) {
                        var newMutants = _this.generateMutants(mutatedNodes, baseAst, file, mutator.name);
                        newMutants.forEach(function (mutant) { return mutants.push(mutant); });
                    }
                });
            });
        });
        return mutants;
    };
    JavaScriptMutator.prototype.hasValidExtension = function (file) {
        return ['.js', '.jsx'].some(function (extension) { return path.extname(file.name) === extension; });
    };
    JavaScriptMutator.prototype.generateMutants = function (nodes, ast, file, mutatorName) {
        var _this = this;
        var mutants = [];
        nodes.forEach(function (node) {
            var replacement = BabelParser_1.default.generateCode(ast, node);
            if (replacement) {
                var range = [node.start, node.end];
                var mutant = {
                    mutatorName: mutatorName,
                    fileName: file.name,
                    range: range,
                    replacement: replacement
                };
                _this.log.trace("Generated mutant for mutator " + mutatorName + " in file " + file.name + " with replacement code \"" + replacement + "\"");
                mutants.push(mutant);
            }
        });
        return mutants;
    };
    return JavaScriptMutator;
}());
exports.default = JavaScriptMutator;
//# sourceMappingURL=JavaScriptMutator.js.map