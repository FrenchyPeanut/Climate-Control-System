"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var log4js_1 = require("log4js");
var MochaRunnerOptions_1 = require("./MochaRunnerOptions");
var MochaConfigEditor = /** @class */ (function () {
    function MochaConfigEditor() {
        this.log = log4js_1.getLogger(MochaConfigEditor.name);
    }
    MochaConfigEditor.prototype.edit = function (config) {
        var mochaOptions = config[MochaRunnerOptions_1.mochaOptionsKey];
        if (mochaOptions && mochaOptions.opts) {
            var optsFileName = path.resolve(mochaOptions.opts);
            this.log.info("Loading mochaOpts from \"" + optsFileName + "\"");
            var options = fs.readFileSync(optsFileName, 'utf8');
            var runnerOptions = Object.assign(this.parseOptsFile(options), config[MochaRunnerOptions_1.mochaOptionsKey]);
            config[MochaRunnerOptions_1.mochaOptionsKey] = runnerOptions;
        }
    };
    MochaConfigEditor.prototype.parseOptsFile = function (optsFileContent) {
        var _this = this;
        var options = optsFileContent.split('\n').map(function (val) { return val.trim(); });
        var mochaRunnerOptions = {
            require: []
        };
        options.forEach(function (option) {
            var args = option.split(' ').filter(Boolean);
            if (args[0]) {
                switch (args[0]) {
                    case '--require':
                    case '-r':
                        args.shift();
                        (_a = mochaRunnerOptions.require).push.apply(_a, args);
                        break;
                    case '--timeout':
                    case '-t':
                        mochaRunnerOptions.timeout = _this.parseNextInt(args);
                        break;
                    case '--async-only':
                    case '-A':
                        mochaRunnerOptions.asyncOnly = true;
                        break;
                    case '--ui':
                    case '-u':
                        mochaRunnerOptions.ui = _this.parseNextString(args);
                        break;
                    default:
                        _this.log.debug("Ignoring option \"" + args[0] + "\" as it is not supported.");
                        break;
                }
            }
            var _a;
        });
        return mochaRunnerOptions;
    };
    MochaConfigEditor.prototype.parseNextInt = function (args) {
        if (args.length > 1) {
            return Number.parseInt(args[1]);
        }
        else {
            return undefined;
        }
    };
    MochaConfigEditor.prototype.parseNextString = function (args) {
        if (args.length > 1) {
            return args[1];
        }
        else {
            return undefined;
        }
    };
    return MochaConfigEditor;
}());
exports.default = MochaConfigEditor;
//# sourceMappingURL=MochaConfigEditor.js.map