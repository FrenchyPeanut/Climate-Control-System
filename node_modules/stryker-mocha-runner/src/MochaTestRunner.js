"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var log4js_1 = require("log4js");
var events_1 = require("events");
var test_runner_1 = require("stryker-api/test_runner");
var LibWrapper_1 = require("./LibWrapper");
var StrykerMochaReporter_1 = require("./StrykerMochaReporter");
var MochaRunnerOptions_1 = require("./MochaRunnerOptions");
var MochaTestRunner = /** @class */ (function (_super) {
    tslib_1.__extends(MochaTestRunner, _super);
    function MochaTestRunner(runnerOptions) {
        var _this = _super.call(this) || this;
        _this.log = log4js_1.getLogger(MochaTestRunner.name);
        _this.files = runnerOptions.files;
        _this.mochaRunnerOptions = runnerOptions.strykerOptions[MochaRunnerOptions_1.mochaOptionsKey];
        _this.additionalRequires();
        return _this;
    }
    MochaTestRunner.prototype.purgeFiles = function () {
        this.files.forEach(function (f) { return delete require.cache[f.name]; });
    };
    MochaTestRunner.prototype.run = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.purgeFiles();
                var mocha_1 = new LibWrapper_1.default.Mocha({ reporter: StrykerMochaReporter_1.default, bail: true });
                _this.addFiles(mocha_1);
                _this.configure(mocha_1);
                try {
                    mocha_1.run(function (failures) {
                        var reporter = StrykerMochaReporter_1.default.CurrentInstance;
                        if (reporter) {
                            var result = reporter.runResult;
                            resolve(result);
                        }
                        else {
                            var errorMsg = 'The StrykerMochaReporter was not instantiated properly. Could not retrieve the RunResult.';
                            _this.log.error(errorMsg);
                            resolve({
                                tests: [],
                                errorMessages: [errorMsg],
                                status: test_runner_1.RunStatus.Error
                            });
                        }
                    });
                }
                catch (error) {
                    resolve({
                        status: test_runner_1.RunStatus.Error,
                        tests: [],
                        errorMessages: [error]
                    });
                }
            }
            catch (error) {
                _this.log.error(error);
                reject(error);
            }
        });
    };
    MochaTestRunner.prototype.addFiles = function (mocha) {
        this.files.filter(function (file) { return file.included; }).forEach(function (f) {
            mocha.addFile(f.name);
        });
    };
    MochaTestRunner.prototype.configure = function (mocha) {
        var options = this.mochaRunnerOptions;
        function setIfDefined(value, operation) {
            if (typeof value !== 'undefined') {
                operation.apply(mocha, [value]);
            }
        }
        if (options) {
            setIfDefined(options.asyncOnly, mocha.asyncOnly);
            setIfDefined(options.timeout, mocha.timeout);
            setIfDefined(options.ui, mocha.ui);
        }
    };
    MochaTestRunner.prototype.additionalRequires = function () {
        if (this.mochaRunnerOptions && this.mochaRunnerOptions.require) {
            this.mochaRunnerOptions.require.forEach(LibWrapper_1.default.require);
        }
    };
    return MochaTestRunner;
}(events_1.EventEmitter));
exports.default = MochaTestRunner;
//# sourceMappingURL=MochaTestRunner.js.map