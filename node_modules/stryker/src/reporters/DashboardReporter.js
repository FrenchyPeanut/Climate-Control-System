"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var DashboardReporterClient_1 = require("./dashboard-reporter/DashboardReporterClient");
var objectUtils_1 = require("../utils/objectUtils");
var log4js_1 = require("log4js");
var DashboardReporter = /** @class */ (function () {
    function DashboardReporter(setting, dashboardReporterClient) {
        if (dashboardReporterClient === void 0) { dashboardReporterClient = new DashboardReporterClient_1.default(); }
        this.dashboardReporterClient = dashboardReporterClient;
        this.log = log4js_1.getLogger(DashboardReporter.name);
    }
    DashboardReporter.prototype.readEnvironmentVariable = function (name) {
        var environmentVariable = objectUtils_1.getEnvironmentVariable(name);
        if (environmentVariable) {
            return environmentVariable;
        }
        else {
            this.log.warn("Missing environment variable " + name);
            return undefined;
        }
    };
    DashboardReporter.prototype.onScoreCalculated = function (ScoreResult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var mutationScore, travisBuild, pullRequest, repository, branch, apiKey;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mutationScore = ScoreResult.mutationScore;
                        travisBuild = objectUtils_1.getEnvironmentVariable('TRAVIS');
                        if (!travisBuild) return [3 /*break*/, 5];
                        pullRequest = objectUtils_1.getEnvironmentVariable('TRAVIS_PULL_REQUEST');
                        if (!(pullRequest === 'false')) return [3 /*break*/, 3];
                        repository = this.readEnvironmentVariable('TRAVIS_REPO_SLUG');
                        branch = this.readEnvironmentVariable('TRAVIS_BRANCH');
                        apiKey = this.readEnvironmentVariable('STRYKER_DASHBOARD_API_KEY');
                        if (!(repository && branch && apiKey)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dashboardReporterClient.postStrykerDashboardReport({
                                apiKey: apiKey,
                                repositorySlug: 'github.com/' + repository,
                                branch: branch,
                                mutationScore: mutationScore
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        this.log.info('Dashboard report is not send when build is for a pull request {TRAVIS_PULL_REQUEST=<number>}');
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        this.log.info('Dashboard report is not send when stryker didn\'t run on buildserver {TRAVIS=true}');
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return DashboardReporter;
}());
exports.default = DashboardReporter;
//# sourceMappingURL=DashboardReporter.js.map